package game;

import cards.Carta;
import javax.swing.JOptionPane;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


public class Habilidades {
	
	private Map<Carta, MolduraCarta> cartasCampoJogador1;
	private Map<Carta, MolduraCarta> cartasCampoJogador2;


	public void ativarHabilidade(Carta carta, int idJogador, Map<Carta, MolduraCarta> cartasCampoJogador1, Map<Carta, MolduraCarta> cartasCampoJogador2) {
	    switch (carta.getId()) {
	    case 0:
            habilidade0(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 1:
            habilidade1(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 2:
            habilidade2(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 3:
            habilidade3(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 4:
            habilidade4(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 5:
            habilidade5(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 6:
            habilidade6(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 7:
            habilidade7(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 8:
            habilidade9(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 9:
            habilidade9(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 10:
            habilidade9(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 11:
            habilidade11(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 12:
            habilidade12(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 13:
            habilidade13(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 14:
            habilidade14(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 15:
            habilidade15(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 16:
            habilidade17(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 17:
            habilidade17(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 18:
            habilidade18(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 19:
            habilidade19(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 20:
            habilidade20(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 21:
            habilidade21(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 22:
            habilidade22(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 23:
            habilidade23(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 24:
            habilidade24(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 25:
            habilidade25(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 26:
            habilidade26(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 27:
            habilidade27(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 28:
            habilidade28(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 29:
            habilidade29(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 30:
            habilidade30(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 31:
            habilidade31(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 32:
            habilidade32(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 33:
            habilidade33(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 34:
            habilidade34(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 35:
            habilidade36(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 36:
            habilidade36(idJogador, cartasCampoJogador1, cartasCampoJogador2); 
            break;
        case 37:
        	habilidade36(idJogador, cartasCampoJogador1, cartasCampoJogador2); 
            break;
        case 38:
        	habilidade39(idJogador, cartasCampoJogador1, cartasCampoJogador2); 
            break;
        case 39:
            habilidade39(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 40:
        	habilidade39(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 41:
        	habilidade42(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 42:
            habilidade42(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 43:
        	habilidade42(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 44:
        	habilidade45(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 45:
            habilidade45(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 46:
            habilidade46(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 47:
        	habilidade46(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 48:
        	habilidade46(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 49:
        	habilidade49(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        case 50:
            habilidade50(idJogador, cartasCampoJogador1, cartasCampoJogador2);
            break;
        default:
            JOptionPane.showMessageDialog(null, "Habilidade não encontrada para a carta: " + carta.getNome(), "Habilidade", JOptionPane.INFORMATION_MESSAGE);
            break;
        }
    }


    // Implementações de habilidades usando JOptionPane para exibir uma mensagem
	private void habilidade0(int idJogador, Map<Carta, MolduraCarta> cartasCampoJogador1, Map<Carta, MolduraCarta> cartasCampoJogador2) {
        
    }
    
	private void habilidade1(int idJogador, Map<Carta, MolduraCarta> cartasCampoJogador1, Map<Carta, MolduraCarta> cartasCampoJogador2) {
        
    }
    
	private void habilidade2(int idJogador, Map<Carta, MolduraCarta> cartasCampoJogador1, Map<Carta, MolduraCarta> cartasCampoJogador2) {
        
    }
    
	private void habilidade3(int idJogador, Map<Carta, MolduraCarta> cartasCampoJogador1, Map<Carta, MolduraCarta> cartasCampoJogador2) {
        
    }
    
	private void habilidade4(int idJogador, Map<Carta, MolduraCarta> cartasCampoJogador1, Map<Carta, MolduraCarta> cartasCampoJogador2) {
        
    }
    
	private void habilidade5(int idJogador, Map<Carta, MolduraCarta> cartasCampoJogador1, Map<Carta, MolduraCarta> cartasCampoJogador2) {
        
    }
    
	private void habilidade6(int idJogador, Map<Carta, MolduraCarta> cartasCampoJogador1, Map<Carta, MolduraCarta> cartasCampoJogador2) {
        
    }
    
	private void habilidade7(int idJogador, Map<Carta, MolduraCarta> cartasCampoJogador1, Map<Carta, MolduraCarta> cartasCampoJogador2) {
        
    }
    
	private void habilidade8(int idJogador, Map<Carta, MolduraCarta> cartasCampoJogador1, Map<Carta, MolduraCarta> cartasCampoJogador2) {
        
    }
    
	private void habilidade9(int idJogador, Map<Carta, MolduraCarta> cartasCampoJogador1, Map<Carta, MolduraCarta> cartasCampoJogador2) {
	    // Determina o campo do jogador que ativou a habilidade
	    Map<Carta, MolduraCarta> cartasNoCampo = (idJogador == 1) ? cartasCampoJogador1 : cartasCampoJogador2;

	   

	    // Itera pelas cartas no campo do jogador para aplicar o efeito
	    for (Carta aliado : cartasNoCampo.keySet()) {
	        int novaVida = aliado.getVida() + 1; // Aumenta a vida em 1
	        aliado.setVida(novaVida); // Atualiza a vida da carta
	    }


	    // Exibe uma mensagem informando a ativação da habilidade
	    JOptionPane.showMessageDialog(null, "Habilidade 9 ativada: Poder Ancestral - +1 de vida para todos os aliados.", "Habilidade 9", JOptionPane.INFORMATION_MESSAGE);
	}

    
	private void habilidade10(int idJogador, Map<Carta, MolduraCarta> cartasCampoJogador1, Map<Carta, MolduraCarta> cartasCampoJogador2) {
        
    }
    
	private void habilidade11(int idJogador, Map<Carta, MolduraCarta> cartasCampoJogador1, Map<Carta, MolduraCarta> cartasCampoJogador2) {
        
    }
    
	private void habilidade12(int idJogador, Map<Carta, MolduraCarta> cartasCampoJogador1, Map<Carta, MolduraCarta> cartasCampoJogador2) {
        
    }
    
	private void habilidade13(int idJogador, Map<Carta, MolduraCarta> cartasCampoJogador1, Map<Carta, MolduraCarta> cartasCampoJogador2) {
       
    }
    
	private void habilidade14(int idJogador, Map<Carta, MolduraCarta> cartasCampoJogador1, Map<Carta, MolduraCarta> cartasCampoJogador2) {
        
    }
    
	private void habilidade15(int idJogador, Map<Carta, MolduraCarta> cartasCampoJogador1, Map<Carta, MolduraCarta> cartasCampoJogador2) {
        
    }
    
	private void habilidade16(int idJogador, Map<Carta, MolduraCarta> cartasCampoJogador1, Map<Carta, MolduraCarta> cartasCampoJogador2) {
        
    }
    
	private void habilidade17(int idJogador, Map<Carta, MolduraCarta> cartasCampoJogador1, Map<Carta, MolduraCarta> cartasCampoJogador2) {
	    // Determina o campo do jogador que ativou a habilidade
	    Map<Carta, MolduraCarta> cartasNoCampo = (idJogador == 1) ? cartasCampoJogador1 : cartasCampoJogador2;

	    // Exibe uma mensagem informando a ativação da habilidade
	    JOptionPane.showMessageDialog(null, "Habilidade 17 ativada! Grito de guerra do Minotauro: +1 de ataque para todos os aliados.", "Habilidade 17", JOptionPane.INFORMATION_MESSAGE);

	    // Itera pelas cartas no campo do jogador para aplicar o efeito
	    for (Carta aliado : cartasNoCampo.keySet()) {
	        int novoAtaque = aliado.getAtaque() + 1; // Aumenta o ataque em 1
	        aliado.setAtaque(novoAtaque); // Atualiza o ataque da carta
	    }

	   
	}

    
	private void habilidade18(int idJogador, Map<Carta, MolduraCarta> cartasCampoJogador1, Map<Carta, MolduraCarta> cartasCampoJogador2) {
        
    }
    
	private void habilidade19(int idJogador, Map<Carta, MolduraCarta> cartasCampoJogador1, Map<Carta, MolduraCarta> cartasCampoJogador2) {
        
    }
    
	private void habilidade20(int idJogador, Map<Carta, MolduraCarta> cartasCampoJogador1, Map<Carta, MolduraCarta> cartasCampoJogador2) {
        
    }
    
	private void habilidade21(int idJogador, Map<Carta, MolduraCarta> cartasCampoJogador1, Map<Carta, MolduraCarta> cartasCampoJogador2) {
        
    }
    
	private void habilidade22(int idJogador, Map<Carta, MolduraCarta> cartasCampoJogador1, Map<Carta, MolduraCarta> cartasCampoJogador2) {
        
    }
    
	private void habilidade23(int idJogador, Map<Carta, MolduraCarta> cartasCampoJogador1, Map<Carta, MolduraCarta> cartasCampoJogador2) {
        
    }
    
	private void habilidade24(int idJogador, Map<Carta, MolduraCarta> cartasCampoJogador1, Map<Carta, MolduraCarta> cartasCampoJogador2) {
        
    }
    
	private void habilidade25(int idJogador, Map<Carta, MolduraCarta> cartasCampoJogador1, Map<Carta, MolduraCarta> cartasCampoJogador2) {
        
    }
    
	private void habilidade26(int idJogador, Map<Carta, MolduraCarta> cartasCampoJogador1, Map<Carta, MolduraCarta> cartasCampoJogador2) {
        
    }
    
	private void habilidade27(int idJogador, Map<Carta, MolduraCarta> cartasCampoJogador1, Map<Carta, MolduraCarta> cartasCampoJogador2) {
        
    }
    
	private void habilidade28(int idJogador, Map<Carta, MolduraCarta> cartasCampoJogador1, Map<Carta, MolduraCarta> cartasCampoJogador2) {
        
    }
    
	private void habilidade29(int idJogador, Map<Carta, MolduraCarta> cartasCampoJogador1, Map<Carta, MolduraCarta> cartasCampoJogador2) {
        
    }
    
	private void habilidade30(int idJogador, Map<Carta, MolduraCarta> cartasCampoJogador1, Map<Carta, MolduraCarta> cartasCampoJogador2) {
        
    }
    
	private void habilidade31(int idJogador, Map<Carta, MolduraCarta> cartasCampoJogador1, Map<Carta, MolduraCarta> cartasCampoJogador2) {
        
    }
    
	private void habilidade32(int idJogador, Map<Carta, MolduraCarta> cartasCampoJogador1, Map<Carta, MolduraCarta> cartasCampoJogador2) {
        
    }
    
	private void habilidade33(int idJogador, Map<Carta, MolduraCarta> cartasCampoJogador1, Map<Carta, MolduraCarta> cartasCampoJogador2) {
        
    }
    
	private void habilidade34(int idJogador, Map<Carta, MolduraCarta> cartasCampoJogador1, Map<Carta, MolduraCarta> cartasCampoJogador2) {
        
    }
    
	private void habilidade35(int idJogador, Map<Carta, MolduraCarta> cartasCampoJogador1, Map<Carta, MolduraCarta> cartasCampoJogador2) {
        
    }
    
	private void habilidade36(int idJogador, Map<Carta, MolduraCarta> cartasCampoJogador1, Map<Carta, MolduraCarta> cartasCampoJogador2) {
	    Map<Carta, MolduraCarta> cartasNoCampo = (idJogador == 1) ? cartasCampoJogador1 : cartasCampoJogador2;

	    if (cartasNoCampo.isEmpty()) {
	        JOptionPane.showMessageDialog(null, "Erro: Nenhuma carta no campo do Jogador " + idJogador);
	        return;
	    }

	    // Itera pelas cartas no campo do jogador e aplica o efeito
	    for (Carta aliado : cartasNoCampo.keySet()) {
	        int novaVida = aliado.getVida() + 2; // Aumenta a vida em 2
	        aliado.setVida(novaVida);
	    }

	    JOptionPane.showMessageDialog(null, "Habilidade 36 ativada: Aumenta a vida de aliados do Jogador " + idJogador + " em 2.", "Habilidade 36", JOptionPane.INFORMATION_MESSAGE);
	}

	private void habilidade39(int idJogador, Map<Carta, MolduraCarta> cartasCampoJogador1, Map<Carta, MolduraCarta> cartasCampoJogador2) {
	    Map<Carta, MolduraCarta> cartasNoCampo = (idJogador == 1) ? cartasCampoJogador1 : cartasCampoJogador2;

	    if (cartasNoCampo.isEmpty()) {
	        JOptionPane.showMessageDialog(null, "Erro: Nenhuma carta no campo do Jogador " + idJogador);
	        return;
	    }

	    // Itera pelas cartas no campo do jogador e aplica o efeito
	    for (Carta aliado : cartasNoCampo.keySet()) {
	        int novaVida = aliado.getVida() + 4; // Aumenta a vida em 4
	        aliado.setVida(novaVida);
	    }

	    JOptionPane.showMessageDialog(null, "Habilidade 39 ativada: Aumenta a vida de aliados do Jogador " + idJogador + " em 4.", "Habilidade 39", JOptionPane.INFORMATION_MESSAGE);
	}

	private void habilidade42(int idJogador, Map<Carta, MolduraCarta> cartasCampoJogador1, Map<Carta, MolduraCarta> cartasCampoJogador2) {
	    Map<Carta, MolduraCarta> cartasNoCampo = (idJogador == 1) ? cartasCampoJogador1 : cartasCampoJogador2;

	    JOptionPane.showMessageDialog(null, "Habilidade 42 ativada! Aumenta o ataque de aliados em 2.", "Habilidade 42", JOptionPane.INFORMATION_MESSAGE);

	    // Itera pelas cartas no campo do jogador e aplica o efeito
	    for (Carta aliado : cartasNoCampo.keySet()) {
	        int novoAtaque = aliado.getAtaque() + 2; // Aumenta o ataque em 2
	        aliado.setAtaque(novoAtaque); // Atualiza o ataque da carta
	    }

	    JOptionPane.showMessageDialog(null, "Encantamento 'Cristal do Pensamento' ativado: Aumenta o ataque de Aliados em 2.", "Encantamento", JOptionPane.INFORMATION_MESSAGE);
	}

	private void habilidade45(int idJogador, Map<Carta, MolduraCarta> cartasCampoJogador1, Map<Carta, MolduraCarta> cartasCampoJogador2) {
	    Map<Carta, MolduraCarta> cartasNoCampo = (idJogador == 1) ? cartasCampoJogador1 : cartasCampoJogador2;

	    JOptionPane.showMessageDialog(null, "Habilidade 45 ativada! Aumenta a vida de Aliados em 9.", "Habilidade 45", JOptionPane.INFORMATION_MESSAGE);

	    // Itera pelas cartas no campo do jogador e aplica o efeito
	    for (Carta aliado : cartasNoCampo.keySet()) {
	        int novaVida = aliado.getVida() + 9; // Aumenta a vida em 9
	        aliado.setVida(novaVida); // Atualiza a vida da carta
	    }

	    JOptionPane.showMessageDialog(null, "Encantamento 'Escudo Celestial' ativado: Aumenta a vida de Aliados em 9.", "Encantamento", JOptionPane.INFORMATION_MESSAGE);
	}

	private void habilidade46(int idJogador, Map<Carta, MolduraCarta> cartasCampoJogador1, Map<Carta, MolduraCarta> cartasCampoJogador2) {
	    Map<Carta, MolduraCarta> cartasNoCampo = (idJogador == 1) ? cartasCampoJogador1 : cartasCampoJogador2;

	    JOptionPane.showMessageDialog(null, "Habilidade 46 ativada! Causa 2 de dano a todos no tabuleiro.", "Habilidade 46", JOptionPane.INFORMATION_MESSAGE);

	    // Aplica o dano a todas as cartas no campo de ambos os jogadores
	    for (Map<Carta, MolduraCarta> campo : new Map[]{cartasCampoJogador1, cartasCampoJogador2}) {
	        for (Carta inimigo : campo.keySet()) {
	            int novaVida = inimigo.getVida() - 2; // Causa 2 de dano
	            inimigo.setVida(Math.max(novaVida, 0)); // Atualiza a vida da carta
	        }
	    }

	    JOptionPane.showMessageDialog(null, "Feitiço 'Bola de Energia' ativado: Causa 2 de dano a todas as cartas no campo.", "Feitiço", JOptionPane.INFORMATION_MESSAGE);
	}

	private void habilidade49(int idJogador, Map<Carta, MolduraCarta> cartasCampoJogador1, Map<Carta, MolduraCarta> cartasCampoJogador2) {
	    Map<Carta, MolduraCarta> cartasNoCampo = (idJogador == 1) ? cartasCampoJogador1 : cartasCampoJogador2;

	    JOptionPane.showMessageDialog(null, "Habilidade 49 ativada! Aumenta 3 de vida a todos no campo.", "Habilidade 49", JOptionPane.INFORMATION_MESSAGE);

	    // Aplica o aumento de vida a todas as cartas no campo de ambos os jogadores
	    for (Map<Carta, MolduraCarta> campo : new Map[]{cartasCampoJogador1, cartasCampoJogador2}) {
	        for (Carta aliado : campo.keySet()) {
	            int novaVida = aliado.getVida() + 3; // Aumenta a vida em 3
	            aliado.setVida(novaVida); // Atualiza a vida da carta
	        }
	    }

	    JOptionPane.showMessageDialog(null, "Feitiço 'Proteção Arcana' ativado: Aumenta 3 de vida para todas as cartas no campo.", "Feitiço", JOptionPane.INFORMATION_MESSAGE);
	}

	private void habilidade50(int idJogador, Map<Carta, MolduraCarta> cartasCampoJogador1, Map<Carta, MolduraCarta> cartasCampoJogador2) {
	    JOptionPane.showMessageDialog(null, "Habilidade 50 ativada! Armagedom causando 30 de dano a todas as cartas.", "Habilidade 50", JOptionPane.INFORMATION_MESSAGE);

	    // Aplica o dano de 30 a todas as cartas no campo de ambos os jogadores
	    for (Map<Carta, MolduraCarta> campo : new Map[]{cartasCampoJogador1, cartasCampoJogador2}) {
	        for (Carta carta : campo.keySet()) {
	            int novaVida = carta.getVida() - 30; // Causa 30 de dano
	            carta.setVida(Math.max(novaVida, 0)); // Atualiza a vida da carta
	        }
	    }

	    JOptionPane.showMessageDialog(null, "Feitiço 'Armagedom' ativado: Causa 30 de dano a todas as cartas no campo.", "Feitiço", JOptionPane.INFORMATION_MESSAGE);
	}
}
